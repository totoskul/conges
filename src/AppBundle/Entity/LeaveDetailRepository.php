<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use AppBundle\Helper\DateHelper;
/**
 * LeaveDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeaveDetailRepository extends EntityRepository
{
	public function findAll()
    {
        return $this->findBy(array(), array('dateProposal' => 'ASC'));
    }
	/**
	* renvoie la liste des congés en attente de validation
	*/
	public function findAllWithAL()
	{
		$result =  $this->createQueryBuilder('ld')
            ->addSelect( 'u')
			->addSelect('lm')
			->join('ld.user', 'u')
			->join('u.userLeaveMonths', 'lm')
			->where('ld.leaveStatus = 1 and ld.leaveType = lm.leaveType')
			->orderBy('ld.startDate', 'DESC')
			->getQuery()->getResult();
		
		return $result;
	}
	
	
	/**
	* renvoie la liste des congés déjà validés
	*/
	public function findAllUserValidatedLeaves($user)
	{
		$result =  $result =  $this->createQueryBuilder('ld')
            ->addSelect( 'u')
			->addSelect('lm')
			->join('ld.user', 'u')
			->join('u.userLeaveMonths', 'lm')
			
			->where('ld.leaveStatus = 2 and ld.leaveType = lm.leaveType and u.id = :id_user ')
			->orderBy('ld.startDate','DESC')
			->setParameter('id_user', $user->getId())
			
			->getQuery()->getResult();
		
		return $result;
	}
	
	/**
	* Renvoie la structure des congés poru les gègles de validation
	*/
	public function getValidLeaveStructure($user, $year = 2016)
	{
		
		// on récupère toutes les informations relatives à l'utilisateur
		$retour = array();
		// tableau des RTT fixes par mois
		$rtt_f_array = array();
		$rtt_fs =  $this->createQueryBuilder('ld')
		->addSelect( 'u')
		->join('ld.user', 'u')
		->where('ld.leaveStatus in (1,2) and ld.leaveType = 3 and u.id = :id_user')
		->setParameter('id_user', $user->getId())
		->getQuery()->getResult();
		
		foreach($rtt_fs as $rtt_f)
		{
			$rtt_f_array[date("m",strtotime($rtt_f->getStartDate()->format('Y-m-d H:i:s')))] = $rtt_f->getNbDays();
		}
		
		// Tableau du nombre de RTT variables par semestre
		// tableau des RTT fixes par mois
		$rtt_v_array = array('S1'=>0, 'S2'=>0);
		$rtt_vs =  $this->createQueryBuilder('ld')
		->addSelect( 'u')
		->join('ld.user', 'u')
		->where('ld.leaveStatus in (1,2) and ld.leaveType = 2 and u.id = :id_user ')
		->setParameter('id_user', $user->getId())
		->getQuery()->getResult();
		
		foreach($rtt_vs as $rtt_v)
		{
			//$nb_days = DateHelper::computeDaysNumber($start_date->getTimeStamp(), $end_date->getTimeStamp());
			// on vérifie si la demande est à cheval sur deux mois. Puis on impute à tel ou tel semestre les jours de congé associés
			$m1 = date("m",strtotime($rtt_v->getStartDate()->format('Y-m-d H:i:s')));
			$m2 = date("m",strtotime($rtt_v->getEndDate()->format('Y-m-d H:i:s')));
			if($m1 != $m2)
			{
				// on calcule le nombre de jours entre le premier jour de la demande de congés et le dernier jour du mois en question
				// on crée un datetime pour ça. 
				$last_day = new \DateTime(date("Y-m-t",strtotime($rtt_v->getStartDate()->format('Y-m-d H:i:s'))));
				$first_day = new \DateTime(date("Y-m-01",strtotime($rtt_v->getEndDate()->format('Y-m-d H:i:s'))));
				$nb_days_m1 = DateHelper::computeDaysNumber($rtt_v->getStartDate()->getTimeStamp(), 
				$last_day->getTimeStamp());
				switch($m1)
				{
					case '01':
					case '02':
					case '03':
					case '04':
					case '05':
					case '06':
						$rtt_v_array['S1'] += $nb_days_m1;
						if($rtt_v->getLeaveStartPeriod()->getName() != 'Matin')
						{
							$rtt_v_array['S1'] -= 0.5;
						}
						break;
					default:
						$rtt_v_array['S2'] += $nb_days_m1;
						if($rtt_v->getLeaveStartPeriod()->getName() != 'Matin')
						{
							$rtt_v_array['S2'] -= 0.5;
						}
						break;				
				}
				// on calcule le nombre de jours entre le premier jour du mois et le dernier jour de la demande de congés
				$nb_days_m2 = DateHelper::computeDaysNumber($first_day->getTimeStamp(),$rtt_v->getEndDate()->getTimeStamp());
				switch($m2)
				{
					case '01':
					case '02':
					case '03':
					case '04':
					case '05':
					case '06':
						$rtt_v_array['S1'] += $nb_days_m2;
						// gestion des demi journées
						if($rtt_v->getLeaveEndPeriod()->getName() == 'Matin')
						{
							$rtt_v_array['S1'] -= 0.5;
						}
						
						break;
					default:
						$rtt_v_array['S2'] += $nb_days_m2;
						// gestion des demi journées
						// suppression d'une demie-journée en cas de période "matin" pour la fin
						if($rtt_v->getLeaveEndPeriod()->getName() == 'Matin')
						{
							$rtt_v_array['S2'] -= 0.5;
						}
						
						
						break;				
				}
				
			}	
			else
			{
				// cas nominal, début et fin sur le même mois
				$m1 =  date("m",strtotime($rtt_v->getStartDate()->format('Y-m-d H:i:s')));
				switch($m1)
				{
					case '01':
					case '02':
					case '03':
					case '04':
					case '05':
					case '06':
						$rtt_v_array['S1'] += $rtt_v->getNbDays();
						
						break;
					default:
						$rtt_v_array['S2'] += $rtt_v->getNbDays();
						
						break;				
				}
			}
		}

		
		
		
		
		$retour['RTTF'] = $rtt_f_array;
		$retour['RTTV'] = $rtt_v_array;
		return $retour;
		
	}
	
	public function findAllUserLeaves($user)
	{
		$result =  $result =  $this->createQueryBuilder('ld')
            ->addSelect( 'u')
			->addSelect('lt')
			->join('ld.user', 'u')
			->join('ld.leaveStatus','lt')
			->where('lt.id!=4 and u.id = :id_user ')
			->setParameter('id_user', $user->getId())
			->orderBy('ld.startDate', 'DESC')
			->getQuery()->getResult();
		
		return $result;
	}
	
	
}
